#+title: Emacs Config
#+PROPERTY: header-args:emacs-lisp :tangle "./init.el"

* Package Manager Initialization
#+begin_src emacs-lisp

(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))
(add-to-list 'load-path "~/echurch/bon-app-launcher")

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

(unless (package-installed-p 'use-package)
	(package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)

#+end_src
* Basic UI Configuration
#+begin_src emacs-lisp

  (setq inhibit-startup-message t)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (menu-bar-mode -1)
  (add-hook 'after-init-hook 'global-color-identifiers-mode)

  (font-lock-add-keywords 'c-mode
				 '(("\\<\\([a-zA-Z_]*\\) *("  1 font-lock-keyword-face)))
  
  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(c-basic-offset 'set-from-style t)
   '(c-default-style '((c-mode . "c") (awk-mode . "awk") (other . "gnu")) t)
   '(custom-safe-themes
	 '("a0415d8fc6aeec455376f0cbcc1bee5f8c408295d1c2b9a1336db6947b89dd98" "1d5e33500bc9548f800f9e248b57d1b2a9ecde79cb40c0b1398dec51ee820daf" default))
   '(package-selected-packages
	 '(org-bullets command-log-mode counsel-projectile projectile ivy-rich screenshot lsp-ui rainbow-delimiters all-the-icons exwm multiple-cursors rainbo-identifiers-mode color-identifiers-mode modus-themes preproc-font-lock move-text doom-modeline dap-mode lsp-mode vterm bash-completion doom-themes neotree magit company smooth-scrolling counsel ivy use-package))
   '(warning-suppress-types '((comp) (comp))))
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   )

#+end_src
* Packages Import
#+begin_src emacs-lisp

  (require 'exwm)
  (require 'exwm-config)
  (require 'exwm-systemtray)
  (require 'cl-lib)

  (use-package company
	:diminish company
	:ensure t
	:config
	(add-hook 'after-init-hook 'global-company-mode))

  (use-package doom-themes)
  (use-package smooth-scrolling)

  (use-package ivy
	:diminish ivy-mode
	:bind ()
	:config
	(ivy-mode 1))

  (use-package counsel)
  (use-package magit)
  (use-package neotree)
  (use-package sh-script)
  (use-package bash-completion)
  (use-package vterm)
  (use-package color-identifiers-mode)
  (use-package rainbow-delimiters)
  (use-package diredfl)

  (use-package multiple-cursors)
  (use-package command-log-mode)

  (use-package flycheck)
  (use-package lsp-mode
	:init
	(setq lsp-keymap-prefix "C-c l")
	:hook (
		   (c-mode . lsp)
		   (dockerfile-mode . lsp))
	:commands lsp)
  (use-package dockerfile-mode)
  
  (use-package projectile
	:diminish projectile-mode
	:config (projectile-mode)
	:custom (projectile-completion-system 'ivy)
	:bind-keymap
	("C-c p" . projectile-command-map))

  (use-package counsel-projectile
	:config (counsel-projectile-mode))

  ;; (use-package lsp-ui)

  (use-package move-text)
  (use-package doom-modeline
	:ensure t
	:init (doom-modeline-mode 1))

  (use-package all-the-icons
	:ensure t)

  (use-package preproc-font-lock)

  (use-package ivy-rich
	:init
	(ivy-rich-mode 1))

  (use-package org)

  (use-package org-bullets
	:hook (org-mode . org-bullets-mode)
	:custom
	(org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

  (require 'org-tempo)

  (require 'bon-app-launcher)
#+end_src
* Variables Setup
** EXWM
#+begin_src emacs-lisp

(exwm-config-default)
(exwm-systemtray-enable)

(setq exwm-input-prefix-keys
	  '(?\C-x
		?\C-c
		?\M-x))
		
(setq global-exwm-mode-var 3)
(setq global-exwm-workspace-num 1)
(display-battery-mode)
#+end_src

** Org Mode
#+begin_src emacs-lisp

  (setq org-ellipsis " ▾"
		  org-support-shift-select t
		  org-src-fontify-natively t
		  org-fontify-quote-and-verse-blocks t
		  org-src-tab-acts-natively t
		  org-edit-src-content-indentation 2
		  org-hide-block-startup nil
		  org-src-preserve-indentation nil
		  org-startup-folded 'content
		  org-cycle-separator-lines 2
		  org-capture-bookmark nil)



  (org-babel-do-load-languages
	'org-babel-load-languages
	'((emacs-lisp . t)))


  (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("li" . "src lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
  (add-to-list 'org-structure-template-alist '("json" . "src json"))

(with-eval-after-load "org"
  (when (version-list-= (version-to-list org-version) '(9 4 3))
    (defun org-return-fix (fun &rest args)
      "Fix https://emacs.stackexchange.com/questions/64886."
      (let* ((context (if org-return-follows-link (org-element-context)
            (org-element-at-point)))
             (element-type (org-element-type context)))
    (if (eq element-type 'src-block)
        (apply #'org--newline args)
      (apply fun args))))
    (advice-add 'org-return :around #'org-return-fix)))

(with-eval-after-load "org-src"
  (when (version-list-= (version-to-list org-version) '(9 4 3))
    (defun org-src--contents-for-write-back ()
      "Return buffer contents in a format appropriate for write back.
Assume point is in the corresponding edit buffer."
      (let ((indentation-offset
         (if org-src--preserve-indentation 0
           (+ (or org-src--block-indentation 0)
          (if (memq org-src--source-type '(example-block src-block))
              org-src--content-indentation
            0))))
        (use-tabs? (and (> org-src--tab-width 0) t))
        (source-tab-width org-src--tab-width)
        (contents (org-with-wide-buffer (buffer-string)))
        (write-back org-src--allow-write-back))
    (with-temp-buffer
      ;; Reproduce indentation parameters from source buffer.
      (setq indent-tabs-mode use-tabs?)
      (when (> source-tab-width 0) (setq tab-width source-tab-width))
      ;; Apply WRITE-BACK function on edit buffer contents.
      (insert (org-no-properties contents))
      (goto-char (point-min))
      (when (functionp write-back) (save-excursion (funcall write-back)))
      ;; Add INDENTATION-OFFSET to every non-empty line in buffer,
      ;; unless indentation is meant to be preserved.
      (when (> indentation-offset 0)
        (while (not (eobp))
          (skip-chars-forward " \t")
          ;; (unless (eolp)     ;ignore blank lines
          (let ((i (current-column)))
        (delete-region (line-beginning-position) (point))
        (indent-to (+ i indentation-offset)))
          ;;)
          (forward-line)))
      (buffer-string))))))
(setq org-src-preserve-indentation t)

#+end_src
** UI
#+begin_src emacs-lisp

  (setq-default tab-width 2)
  (setq redisplay-dont-pause t
	scroll-margin 1
	scroll-step 1
	scroll-conservatively 10000)
  (setq-default rainbow-delimiters-mode t)

  (setq initial-scratch-message nil)

  (setq-default c-default-style "linux"
			  c-basic-offset 4)

  (diredfl-global-mode)
  (setq-default tab-width 4)
  (setq column-number-mode t)

  (electric-pair-mode 1)
  (delete-selection-mode)

  (setq-default color-identifiers-mode 1)
  (setcdr (assoc 'counsel-M-x ivy-initial-inputs-alist) "")
  (setq neo-smart-open t)
  (setq dired-dwim-target t)

  (smooth-scrolling-mode 1)
  (load-theme 'doom-dark+ t)
  (setq display-time-default-load-average nil)
  (display-time)

#+end_src

** Emacs System
#+begin_src emacs-lisp
  (setq cur-keyboard-layout 1)

  (setq backup-directory-alist `(("." . "~/.emacs.d/.backups")))
  (setq delete-old-versions t
	kept-new-versions 10
	kept-old-versions 5)
  #+end_src
* Macro Inserts
** Emacs Helper Macros
#+begin_src emacs-lisp

(fset 'kella
   (kmacro-lambda-form [?\C-x ?k return] 0 "%d"))

#+end_src
** Text Editing
#+begin_src emacs-lisp

(fset 'dup-line
	(kmacro-lambda-form [?\C-a ?\S-\C-e ?\C-c ?c return ?\C-v] 0 "%d"))


(fset 'kill-till-end-line
	(kmacro-lambda-form [?\S-\C-e backspace] 0 "%d"))

#+end_src
* Function definitions
** Emacs Setup Functions
#+begin_src emacs-lisp

(defun set-no-process-query-on-exit ()
    (let ((proc (get-buffer-process (current-buffer))))
    (when (processp proc)
    (set-process-query-on-exit-flag proc nil))))

(save-excursion
  (set-buffer (get-buffer-create "*scratch*"))
  (make-local-variable 'kill-buffer-query-functions)
  (add-hook 'kill-buffer-query-functions 'kill-scratch-buffer))

(defun kill-scratch-buffer ()
  ;; The next line is just in case someone calls this manually
  (set-buffer (get-buffer-create "*scratch*"))

  ;; Kill the current (*scratch*) buffer
  (remove-hook 'kill-buffer-query-functions 'kill-scratch-buffer)
  (kill-buffer (current-buffer))

  ;; Make a brand new *scratch* buffer
  (set-buffer (get-buffer-create "*scratch*"))
  (lisp-interaction-mode)
  (make-local-variable 'kill-buffer-query-functions)
  (add-hook 'kill-buffer-query-functions 'kill-scratch-buffer)

  ;; Since we killed it, don't let caller do that.
  nil)

(defun switch-to-last-buffer ()
  (interactive)
  (switch-to-buffer nil))

(defun kill-current-buffer ()
  (interactive)
  (kill-buffer (current-buffer)))

(defun set-us-layout ()
  (eshell-command "setxkbmap -layout us"))

(defun set-ru-layout ()
  (eshell-command "setxkbmap -layout ru"))

(defun set-ua-layout ()
  (eshell-command "setxkbmap -layout ua"))

(defun switch-keyboard-layout ()
  (interactive)
  (progn
	(setq cur-keyboard-layout
	  (if (eql cur-keyboard-layout 3)
		(progn
		  (set-us-layout)
		  (message "set layout: us")
		  1)
	  (+ cur-keyboard-layout 1)))
	(if (eql cur-keyboard-layout 2)
		(progn
		  (set-ua-layout)
		  (message "set layout: ua")))
	(if (eql cur-keyboard-layout 3)
		(progn
		  (set-ru-layout)
		  (message "set layout: ru")))))

(defun take-screenshot ()
  (interactive)
  (start-process "scrot"
    (get-buffer-create "*scrot*")
	"/bin/scrot"
	(concat "/home/slamko/Pictures/" (read-string "Screenshot name: "))))

(defun run-auto-start ()
  (start-process-shell-command "killall" nil "killall nm-applet ; killall pnmxier")
  (start-process-shell-command "nm-applet" nil "nm-applet &")
  (start-process-shell-command "pnmixer" nil "pnmixer &"))

(defun start-message ()
  (message "Welcome back to the Church, my child."))
  
#+end_src
** EXWM
#+begin_src emacs-lisp

(defun fhd/exwm-input-line-mode ()
  "Set exwm window to line-mode and show mode line"
  (call-interactively #'exwm-input-grab-keyboard)
  (setq global-exwm-mode-var 3)
  (exwm-layout-show-mode-line))

(defun fhd/exwm-input-char-mode ()
  "Set exwm window to char-mode and hide mode line"
  (call-interactively #'exwm-input-release-keyboard)
  (setq global-exwm-mode-var 1)
  (exwm-layout-hide-mode-line))

(defun move-to-right-workspace ()
  (interactive)
  (setq global-exwm-workspace-num
		(if (eql global-exwm-workspace-num 3)
			0 (+ global-exwm-workspace-num 1)))
  (exwm-workspace-switch global-exwm-workspace-num))

(defun move-to-left-workspace ()
  (interactive)
  (setq global-exwm-workspace-num
		(if (eql global-exwm-workspace-num 0)
		  3
		  (- global-exwm-workspace-num 1)))
  (exwm-workspace-switch global-exwm-workspace-num))

(defadvice save-buffers-kill-emacs (around no-query-kill-emacs activate)
  "Prevent annoying \"Active processes exist\" query when you quit Emacs."
  (cl-letf (((symbol-function #'process-list) (lambda ())))
    ad-do-it))

(defun fhd/exwm-input-toggle-mode ()
  "Toggle between line- and char-mode"
  (interactive)
  (with-current-buffer (window-buffer)
    (when (eq major-mode 'exwm-mode)
      (if (equal global-exwm-mode-var 3) 
          (fhd/exwm-input-char-mode)
        (fhd/exwm-input-line-mode)))))

#+end_src
** Packages setup functions
#+begin_src emacs-lisp

(defun neotree-project-dir ()
    "Open NeoTree using the git root."
    (interactive)
    (let ((project-dir (ffip-project-root))
          (file-name (buffer-file-name)))
      (if project-dir
          (progn
            (neotree-dir project-dir)
            (neotree-find file-name))
        (message "Could not find git project root."))))

		
(defun my-sh-completion-at-point ()
  (let ((end (point))
        (beg (save-excursion (sh-beginning-of-command))))
    (when (and beg (> end beg))
      (bash-completion-dynamic-complete-nocomint beg end t))))

(defun my-sh-hook ()
  (add-hook 'completion-at-point-functions #'my-sh-completion-at-point nil t))

#+end_src
** Text Editing
#+begin_src emacs-lisp

  (defun toggle-comment-on-line ()
	(interactive)
	(comment-or-uncomment-region (line-beginning-position) (line-end-position)))


  (defun dublicate-line ()
	(interactive)
	(dup-line))

  (defun dublicate-multiple ()
	(interactive)
	(dotimes (c (read-number "Count: " 1))
	  (dup-line)))

  (defun dublicate-region ()
	(interactive)
	(clipboard-kill-region (mark) (point))
	(yank)
	(yank))

  (defun dublicate-region-multiple ()
	(interactive)
	(clipboard-kill-region (mark) (point))
	(yank)
	(dotimes (c (read-number "Count: " 1))
		(yank)))

  (defun insert-next-line ()
	(interactive)
	(move-end-of-line nil)
	(newline-and-indent))

  (defun insert-up-line ()
	(interactive)
	(beginning-of-line)
	(newline-and-indent)
	(previous-line))

  (defun backward-up-sexp (arg)
	(interactive "p")
	(let ((ppss (syntax-ppss)))
	  (cond ((elt ppss 3)
			 (goto-char (elt ppss 8))
			 (backward-up-sexp (1- arg)))
			((backward-up-list arg)))))

  (defun kill-untill-end-line ()
	(interactive)
	(kill-till-end-line))

  (defun lscr--jump ()
	(interactive)
	(pop-to-mark-command)
	(keyboard-quit))

#+end_src
** Keybindings Shortcut
#+begin_src emacs-lisp

(defun init-mode-specific-map ()
  (define-key mode-specific-map (kbd "C-<") 'mc/mark-all-like-this)
  (define-key mode-specific-map (kbd "C-/") 'neotree-toggle)
  (define-key mode-specific-map (kbd "c") 'kill-ring-save)
  (define-key mode-specific-map (kbd "x") 'kill-whole-line)
  (define-key mode-specific-map (kbd "C-x") 'kill-region)
  (define-key mode-specific-map (kbd "d") 'dublicate-line)
  (define-key mode-specific-map (kbd "C-k") 'kill-untill-end-line)
  (define-key mode-specific-map (kbd "<return>") 'switch-keyboard-layout)
  (define-key mode-specific-map (kbd "D") 'dublicate-multiple)
  (define-key mode-specific-map (kbd "C-d") 'dublicate-region)
  (define-key mode-specific-map (kbd "C-M-d") 'dublicate-region-multiple))

#+end_src
* Hooks Setup
** Init Hooks
#+begin_src emacs-lisp

  (init-mode-specific-map)
  (add-hook 'after-init-hook 'global-color-identifiers-mode)
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (add-hook 'term-exec-hook 'set-no-process-query-on-exit)
  
#+end_src
** EXWM
#+begin_src emacs-lisp
(add-hook 'exwm-init-hook 'start-message)
(add-hook 'exwm-init-hook 'run-auto-start)
#+end_src
** Lsp
#+begin_src emacs-lisp
(add-hook 'lsp-mode-hook 'init-mode-specific-map)
#+end_src
** Editing Modes Hooks
#+begin_src emacs-lisp

(add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
(add-hook 'lisp-interaction-mode-hook 'eldoc-mode)
(add-hook 'ielm-mode-hook 'eldoc-mode)
(add-hook 'sh-mode-hook #'my-sh-hook)
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
(add-hook 'org-mode-hook 'display-line-numbers-mode)
 
#+end_src
* Keybindings
** Base Emacs Bindings
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (global-set-key (kbd "M-<tab>") 'switch-to-next-file-buffer)
  (global-set-key (kbd "M-<backspace>") 'switch-to-last-buffer)
  (global-set-key (kbd "C-x w q") 'delete-window)
  (global-set-key (kbd "C-x w k") 'kill-buffer-and-window)
  (global-set-key (kbd "C-S-<return>") 'eshell)
  (global-set-key (kbd "C-<tab>") 'other-window)
  (global-set-key (kbd "<f4>") 'switch-keyboard-layout)
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (global-set-key (kbd "C-s") 'save-buffer)
  (global-set-key (kbd "C-f") 'swiper-isearch)
  (global-set-key (kbd "<print>") 'take-screenshot)
  (global-set-key (kbd "M-r") 'eval-region)
#+end_src

** EXWM
#+begin_src emacs-lisp
			(exwm-input-set-key (kbd "s-<tab>") 'fhd/exwm-input-toggle-mode)
			(exwm-input-set-key (kbd "s-c") 'kill-current-buffer)
			(exwm-input-set-key (kbd "s-p") 'bon-app-launcher)
			(exwm-input-set-key (kbd "s-<right>") 'move-to-right-workspace)
			(exwm-input-set-key (kbd "s-<left>") 'move-to-left-workspace)
			(exwm-input-set-key (kbd "s-<return>") 'vterm)
			(exwm-input-set-key (kbd "s-m") 'exwm-workspace-move)
			(exwm-input-set-key (kbd "s-`")
								(lambda ()
								  (interactive)
								  (exwm-workspace-switch-create 0)))

			(exwm-input-set-key (kbd "s-~")
								(lambda ()
								  (interactive)
								  (exwm-workspace-move exwm-workspace--current 0)
								  (message "moved to workspace 0")))

			(exwm-input-set-key (kbd "s-!")
								(lambda ()
								  (interactive)
								  (exwm-workspace-move exwm-workspace--current 1)
								  (message "moved to workspace 1")))

			(exwm-input-set-key (kbd "s-)")
								(lambda ()
								  (interactive)
								  (exwm-workspace-move exwm-workspace--current 0)
								  (message "moved to workspace 0")))

			(exwm-input-set-key (kbd "s-@")
								(lambda ()
								  (interactive)
								  (exwm-workspace-move exwm-workspace--current 2)
								  (message "moved to workspace 2")))

			(exwm-input-set-key (kbd "s-#")
								(lambda ()
								  (interactive)
								  (exwm-workspace-move exwm-workspace--current 3)
								  (message "moved to workspace 3")))
#+end_src

** Editor Bindins
*** Text Editing
#+begin_src emacs-lisp

(global-set-key (kbd "C-p") 'kill-ring-save)
(global-set-key (kbd "C-S-Q") 'kill-current-buffer)
(global-set-key (kbd "M-<up>") 'move-text-up)
(global-set-key (kbd "M-<down>") 'move-text-down)
(global-set-key (kbd "M-k") 'move-text-up)
(global-set-key (kbd "M-j") 'move-text-down)
(global-set-key (kbd "C-S-w") 'copy-line)
(global-set-key (kbd "M-w") 'kill-region)
(global-set-key (kbd "C-.") 'replace-string)
(global-set-key (kbd "C-M-.") 'replace-regexp)
(global-set-key (kbd "C-z") 'undo)
(global-set-key (kbd "C-;") 'toggle-comment-on-line)
(global-set-key (kbd "C-v") 'yank)
(global-set-key (kbd "C-w") 'ido-delete-backward-word-updir)
(global-set-key (kbd "C-o") 'insert-next-line)
(global-set-key (kbd "C-S-o") 'insert-up-line)

#+end_src
*** Text Navigation
#+begin_src emacs-lisp
  (global-set-key (kbd "C-h") 'left-char)
  (global-set-key (kbd "C-j") 'next-line)
  (global-set-key (kbd "C-k") 'previous-line)
  (global-set-key (kbd "C-l") 'right-char)
  (global-set-key (kbd "C-n") 'forward-char)
  (global-set-key (kbd "M-n") 'forward-word)
  (global-set-key (kbd "C-{") 'beginning-of-buffer)
  (global-set-key (kbd "C-}") 'end-of-buffer)
  (global-set-key (kbd "C-:") 'goto-line)
  (global-set-key (kbd "C-x C-x") 'lscr--jump)
#+end_src
** Packages Setup Bindings
*** Lsp
#+begin_src emacs-lisp
(global-set-key (kbd "<f12>") 'lsp-find-declaration)
#+end_src

*** Multiple Cursors
#+begin_src emacs-lisp
(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
#+end_src

*** Magit
#+begin_src emacs-lisp
  (define-prefix-command 'magit-map)
  (global-set-key (kbd "C-'") 'magit-map)
  (define-key magit-map (kbd "c") 'magit-commit)
  (define-key magit-map (kbd "s") 'magit)
  (define-key magit-map (kbd "m") 'magit-stage-modified)
  (define-key magit-map (kbd "a") 'magit-stage-all)
  (define-key magit-map (kbd "p") 'magit-push)
  (define-key magit-map (kbd "f") 'magit-pull)

#+end_src

*** Counsel
#+begin_src emacs-lisp
(global-set-key (kbd "M-x") 'counsel-M-x)
(global-set-key (kbd "C-x C-f") 'counsel-find-file)
(global-set-key (kbd "M-y") 'counsel-yank-pop)
(global-set-key (kbd "<f1> f") 'counsel-describe-function)
(global-set-key (kbd "<f1> v") 'counsel-describe-variable)
(global-set-key (kbd "<f1> l") 'counsel-find-library)
(global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
(global-set-key (kbd "<f2> u") 'counsel-unicode-char)
(global-set-key (kbd "<f2> j") 'counsel-set-variable)
(global-set-key (kbd "C-x b") 'ivy-switch-buffer)
(global-set-key (kbd "C-x C-a") 'counsel-mark-ring)



#+end_src

* Eshell
#+begin_src emacs-lisp
(setq eshell-history-size 1024)
(setq eshell-prompt-regexp "^[^#$]*[#$] ")

(load "em-hist")           ; So the history vars are defined
(if (boundp 'eshell-save-history-on-exit)
    (setq eshell-save-history-on-exit t)) ; Don't ask, just save
;(message "eshell-ask-to-save-history is %s" eshell-ask-to-save-history)
(if (boundp 'eshell-ask-to-save-history)
    (setq eshell-ask-to-save-history 'always)) ; For older(?) version
;(message "eshell-ask-to-save-history is %s" eshell-ask-to-save-history)

(defun eshell/ef (fname-regexp &rest dir) (ef fname-regexp default-directory))


;;; ---- path manipulation

(defun pwd-repl-home (pwd)
  (interactive)
  (let* ((home (expand-file-name (getenv "HOME")))
   (home-len (length home)))
    (if (and
   (>= (length pwd) home-len)
   (equal home (substring pwd 0 home-len)))
  (concat "~" (substring pwd home-len))
      pwd)))

(defun curr-dir-git-branch-string (pwd)
  "Returns current git branch as a string, or the empty string if
PWD is not in a git repo (or the git command is not found)."
  (interactive)
  (when (and (eshell-search-path "git")
             (locate-dominating-file pwd ".git"))
    (let ((git-output (shell-command-to-string (concat "cd " pwd " && git branch | grep '\\*' | sed -e 's/^\\* //'"))))
      (propertize (concat "["
              (if (> (length git-output) 0)
                  (substring git-output 0 -1)
                "(no branch)")
              "]") 'face `(:foreground "green"))
      )))

(setq eshell-prompt-function
      (lambda ()
        (concat
         (propertize ((lambda (p-lst)
            (if (> (length p-lst) 3)
                (concat
                 (mapconcat (lambda (elm) (if (zerop (length elm)) ""
                                            (substring elm 0 1)))
                            (butlast p-lst 3)
                            "/")
                 "/"
                 (mapconcat (lambda (elm) elm)
                            (last p-lst 3)
                            "/"))
              (mapconcat (lambda (elm) elm)
                         p-lst
                         "/")))
          (split-string (pwd-repl-home (eshell/pwd)) "/")) 'face `(:foreground "yellow"))
         (or (curr-dir-git-branch-string (eshell/pwd)))
         (propertize " λ\n" 'face 'default))))

(setq eshell-highlight-prompt t)
#+end_src

